{"version":3,"sources":["animations/LeftSideBar/BurgerButton/index.js","animations/LeftSideBar/TopSection/index.js","animations/LeftSideBar/LeftSection/index.js","animations/LeftSideBar/index.js","vistas/Home.js","vistas/MapaHospedaje.js","App.js","serviceWorker.js","index.js"],"names":["BurgerButton","onClick","className","role","TopSection","setIsShowSidebar","useContext","LeftSideBarContext","LeftSection","isShowSidebar","useState","status_item_1","setStatusItem1","status_item_2","setStatusItem2","href","src","alt","React","createContext","LeftSideBar","Provider","value","Home","MapaHospedaje","App","path","render","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.72771e03.chunk.js","sourcesContent":["import React from 'react';\nimport './style.scss';\n\nconst BurgerButton = ({ onClick }) => {\n  return (\n    <div\n      className=\"LeftSideBar__BurgerButton\"\n      role=\"button\"\n      onClick={onClick}\n    >\n      <i></i>\n      <i></i>\n      <i></i>\n    </div>\n  );\n};\n\nexport default BurgerButton;\n","import React, { useContext } from 'react';\nimport BurgerButton  from '../BurgerButton';\nimport { LeftSideBarContext } from '../index';\nimport './style.scss';\n\nconst TopSection = () => {\n  const { setIsShowSidebar } = useContext(LeftSideBarContext);\n  return (\n    <div className=\"LeftSideBar__TopSection\">\n      <BurgerButton\n        onClick={() => setIsShowSidebar(true)}\n      />\n      <h1>\n      &nbsp;&nbsp;Sumo.UY\n      </h1>\n    </div>\n  );\n};\n\nexport default TopSection;\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { useContext, useState } from 'react';\nimport BurgerButton from '../BurgerButton';\nimport { LeftSideBarContext } from '../index';\nimport './style.scss';\n\nconst LeftSection = () => {\n  const { isShowSidebar, setIsShowSidebar } = useContext(LeftSideBarContext);\n  const [status_item_1, setStatusItem1] = useState('close_1')\n  const [status_item_2, setStatusItem2] = useState('close_2')\n  return (\n    <div className={`LeftSideBar__LeftSection LeftSideBar__LeftSection--${isShowSidebar ? 'show' : 'hide'}`}>\n      <div className=\"LeftSideBar__LeftSection__topWrapper\">\n        <BurgerButton\n          onClick={() => setIsShowSidebar(false)}\n        />\n      </div>\n      <ul className=\"LeftSideBar__LeftSection__menuWrapper\">\n        <li>\n          <a href=\"/Home\">\n            Noticias\n          </a>\n        </li>\n        <li className={status_item_1}>\n          <a \n            onClick={ () => setStatusItem1(status_item_1 === 'open_1' ? 'close_1' : 'open_1') }>\n            Competencias\n            <img src=\"img/flecha_menu.png\" alt=\"img_flecha\"/>\n          </a>   \n        </li>\n        <ul className={status_item_1}>\n          <li>\n            <a href=\"#\">\n              Sumo Libre            \n            </a>   \n          </li>\n          <li>\n            <a href=\"#\">\n              Escolar            \n            </a> \n          </li>\n          <li>\n            <a href=\"#\">\n              Basica            \n            </a> \n          </li>\n          <li>\n            <a href=\"#\">\n              Avanzada            \n            </a> \n          </li>\n          <li>\n            <a href=\"#\">\n              IEEE sek           \n            </a> \n          </li>\n          <li>\n            <a href=\"#\">\n              SumBot            \n            </a> \n          </li>\n        </ul>       \n        \n        <li className={status_item_2}>\n          <a \n            onClick={() => setStatusItem2(status_item_2 === 'open_2' ? 'close_2' : 'open_2')}>\n            Mapas           \n            <img src=\"./img/flecha_menu.png\" alt=\"img_flecha\"/>\n          </a>\n        </li>\n        <ul className={status_item_2}>\n          <li>\n            <a href=\"#\">\n              Mapa de evento            \n            </a>   \n          </li>\n          <li>\n            <a href=\"/MapaHospedaje\">\n                Mapa hospedajes             \n            </a>\n          </li>\n        </ul>       \n       \n      </ul>\n    </div>\n  );\n};\n\nexport default LeftSection;\n","import React, { useState } from 'react';\nimport TopSection from './TopSection';\nimport LeftSection from './LeftSection';\nimport './style.scss';\n\nexport const LeftSideBarContext = React.createContext({})\n\nconst LeftSideBar = () => {\n  const [isShowSidebar, setIsShowSidebar] = useState(false);\n  return (\n    <LeftSideBarContext.Provider\n      value={{ isShowSidebar, setIsShowSidebar }}\n    >\n      <div className=\"LeftSideBar__container\">\n        <div\n          className={`LeftSideBar__container__overlay LeftSideBar__container__overlay--${isShowSidebar ? 'show' : 'hide'}`}\n          role=\"button\"\n          onClick={() => setIsShowSidebar(false)}\n        ></div>\n        <TopSection />      \n        <LeftSection />\n      </div>\n    </LeftSideBarContext.Provider>\n  );\n};\n\nexport default LeftSideBar;\n","import React from 'react';\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className=\"Home\">\r\n      <h1>HOME</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nfunction MapaHospedaje() {\r\n  return (\r\n    <div className=\"MapaHospedaje\">\r\n      <p>Mapa Hospedaje</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapaHospedaje;\r\n","import React from 'react';\nimport LeftSideBar from './animations/LeftSideBar';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport './App.css';\n\nimport Home from './vistas/Home';\nimport MapaHospedaje from './vistas/MapaHospedaje';\n\nfunction App() {\n  \n  return (\n    <Router>\n      <div className=\"App\">\n        <LeftSideBar/>\n        <Switch>\n          <Route path=\"/Home\" render={() => <Home/>}/>\n          <Route path=\"/MapaHospedaje\" render={() => <MapaHospedaje/>}/>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}